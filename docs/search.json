[
  {
    "objectID": "Modeling.html",
    "href": "Modeling.html",
    "title": "Modeling",
    "section": "",
    "text": "In this Modeling page, we will build predictive classification models for the Diabetes Health Indicators Dataset from kaggle. Our goal is predict the Diabetes_binary variable, and for this task, we will use the following variables as determined by our Exploratory Data Analysis:\nCategorical Variables\n\nHighBP (whether the subject has high blood pressure)\nHighChol (whether the subject has high cholesterol)\nSmoker\nStroke\nHeartDiseaseorAttack\nPhysActivity (physical activity in the past 30 days, not including job)\nFruits (subject consumes fruit at least once a day)\nVeggies (subject consumes veggies at least once a day)\nGenHlth (subject’s rating of their health from 1=excellent to 5=poor)\nDiffWalk (serious difficulty walking or climbing stairs)\nSex (male or female)\nAge (age categories from “18-24” to “80 or older”)\nEducation (highest education achieved, from 1=“kindergarten” to 6=“4+ years of college”)\nIncome (income categories from “less than $10,000” to “more than $75,000”)\n\nNumerical Variables\n\nBMI\nMentHlth (how many of the last 30 days were poor mental health days)\nPhysHlth (how many of the last 30 days were poor physical health days)"
  },
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "EDA",
    "section": "",
    "text": "In this Exploratory Data Analysis, we will explore the Diabetes Health Indicators Dataset from kaggle. As our goal is to model this dataset and predict the Diabetes variable, we are looking for correlations between other variables and the Diabetes variable. The other variables in this dataset and their expected values are:\n\nDiabetes:\n\nno diabetes\nprediabetes or diabetes\n\nHigh_BP: yes/no\n(subject has high blood pressure)\nHigh_Cholesterol: yes/no\nChecked_Cholesterol_5years: yes/no\nBMI: numeric, ranging from 12 to 98\nSmoker: yes/no\nStroke: yes/no\nHeart_Disease_or_Attack: yes/no\nPhysical_Activity_30days: yes/no\nDaily_Fruit: yes/no\nDaily_Vegetable: yes/no\nHeavy_Alcohol_Consumption: yes/no\nHas_Healthcare: yes/no\n(subject has some kind of healthcare coverage)\nNo_Doctor_bc_Cost: yes/no\n(subject has needed to see a doctor within the last year but couldn’t due to cost)\nGeneral_Health:\n\npoor\nfair\ngood\nvery good\nexcellent\n\nBad_Mental_Days_of_Past_30: numeric, ranging from 0 to 30\nBad_Physical_Days_of_Past_30: numeric, ranging from 0 to 30\nDifficulty_Walking: yes/no\nSex: male/female\nAge:\n\n18-24\n25-29\n30-34\n35-39\n40-44\n45-49\n50-54\n55-59\n60-64\n65-69\n70-74\n75-79\n80 or older\n\nHighest_Education_Achieved:\n\nkindergarten\n1st-8th grade\n9th-11th grade\n12th grade or GED\n1-3 years college\n4+ years college\n\nIncome:\n\nless than $10,000\nless than $15,000\nless than $20,000\nless than $25,000\nless than $35,000\nless than $50,000\nless than $75,000\nmore than $75,000\n\n\nThe raw data in this dataset will need to be cleaned up a bit before it looks like the description above! This will be part of our Data Processing step below. We will also use the Data Summaries section below to explore the relationship between each variable and the target variable in order to narrow down which variables we will use for our modeling step, which we will discuss next."
  },
  {
    "objectID": "EDA.html#our-dataset",
    "href": "EDA.html#our-dataset",
    "title": "EDA",
    "section": "",
    "text": "In this Exploratory Data Analysis, we will explore the Diabetes Health Indicators Dataset from kaggle. As our goal is to model this dataset and predict the Diabetes variable, we are looking for correlations between other variables and the Diabetes variable. The other variables in this dataset and their expected values are:\n\nDiabetes:\n\nno diabetes\nprediabetes or diabetes\n\nHigh_BP: yes/no\n(subject has high blood pressure)\nHigh_Cholesterol: yes/no\nChecked_Cholesterol_5years: yes/no\nBMI: numeric, ranging from 12 to 98\nSmoker: yes/no\nStroke: yes/no\nHeart_Disease_or_Attack: yes/no\nPhysical_Activity_30days: yes/no\nDaily_Fruit: yes/no\nDaily_Vegetable: yes/no\nHeavy_Alcohol_Consumption: yes/no\nHas_Healthcare: yes/no\n(subject has some kind of healthcare coverage)\nNo_Doctor_bc_Cost: yes/no\n(subject has needed to see a doctor within the last year but couldn’t due to cost)\nGeneral_Health:\n\npoor\nfair\ngood\nvery good\nexcellent\n\nBad_Mental_Days_of_Past_30: numeric, ranging from 0 to 30\nBad_Physical_Days_of_Past_30: numeric, ranging from 0 to 30\nDifficulty_Walking: yes/no\nSex: male/female\nAge:\n\n18-24\n25-29\n30-34\n35-39\n40-44\n45-49\n50-54\n55-59\n60-64\n65-69\n70-74\n75-79\n80 or older\n\nHighest_Education_Achieved:\n\nkindergarten\n1st-8th grade\n9th-11th grade\n12th grade or GED\n1-3 years college\n4+ years college\n\nIncome:\n\nless than $10,000\nless than $15,000\nless than $20,000\nless than $25,000\nless than $35,000\nless than $50,000\nless than $75,000\nmore than $75,000\n\n\nThe raw data in this dataset will need to be cleaned up a bit before it looks like the description above! This will be part of our Data Processing step below. We will also use the Data Summaries section below to explore the relationship between each variable and the target variable in order to narrow down which variables we will use for our modeling step, which we will discuss next."
  },
  {
    "objectID": "EDA.html#purpose",
    "href": "EDA.html#purpose",
    "title": "EDA",
    "section": "Purpose",
    "text": "Purpose\nThis EDA will be used to discover how to preprocess our dataset for modeling, and to narrow down which variables we use in our model. The purpose of the model, which we will build in the Modeling page, is to learn the structure of the data in order to predict the response variable (Diabetes) from the values of the rest of the variables in the dataset. This means that given a new observation, without seeing the Diabetes variable, we will be able to predict its value."
  },
  {
    "objectID": "EDA.html#importing-the-data-initial-data-processing",
    "href": "EDA.html#importing-the-data-initial-data-processing",
    "title": "EDA",
    "section": "Importing the Data + Initial Data Processing",
    "text": "Importing the Data + Initial Data Processing\n\n# import libraries\nlibrary(readr)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(tidyverse)\n\nHow is the data stored?\n\n# read in the data\ndf &lt;- readr::read_csv(\"diabetes_binary_health_indicators_BRFSS2015.csv\")\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(df)\n\n# A tibble: 6 × 22\n  Diabetes_binary HighBP HighChol CholCheck   BMI Smoker Stroke\n            &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1               0      1        1         1    40      1      0\n2               0      0        0         0    25      1      0\n3               0      1        1         1    28      0      0\n4               0      1        0         1    27      0      0\n5               0      1        1         1    24      0      0\n6               0      1        1         1    25      1      0\n# ℹ 15 more variables: HeartDiseaseorAttack &lt;dbl&gt;, PhysActivity &lt;dbl&gt;,\n#   Fruits &lt;dbl&gt;, Veggies &lt;dbl&gt;, HvyAlcoholConsump &lt;dbl&gt;, AnyHealthcare &lt;dbl&gt;,\n#   NoDocbcCost &lt;dbl&gt;, GenHlth &lt;dbl&gt;, MentHlth &lt;dbl&gt;, PhysHlth &lt;dbl&gt;,\n#   DiffWalk &lt;dbl&gt;, Sex &lt;dbl&gt;, Age &lt;dbl&gt;, Education &lt;dbl&gt;, Income &lt;dbl&gt;\n\n\nA lot of the columns could have better names, and many of them contain data that should be stored as factors instead of doubles. Let’s update the column names and how the data is stored.\n\n# rename columns and update datatypes/data storage\ndf &lt;- df |&gt;\n  rename(Diabetes=Diabetes_binary) |&gt;\n  mutate(Diabetes=case_when(\n    Diabetes==0 ~ \"no diabetes\",\n    Diabetes==1 ~ \"prediabetes or diabetes\")) |&gt;\n  mutate(Diabetes=as.factor(Diabetes)) |&gt;\n  \n  rename(High_BP=HighBP) |&gt;\n  mutate(High_BP=case_when(\n    High_BP==0 ~ \"no\",\n    High_BP==1 ~ \"yes\")) |&gt;\n  mutate(High_BP=as.factor(High_BP)) |&gt;\n  \n  rename(High_Cholesterol=HighChol) |&gt;\n  mutate(High_Cholesterol=case_when(\n    High_Cholesterol==0 ~ \"no\",\n    High_Cholesterol==1 ~ \"yes\")) |&gt;\n  mutate(High_Cholesterol=as.factor(High_Cholesterol)) |&gt;\n  \n  rename(Checked_Cholesterol_5years=CholCheck) |&gt;\n  mutate(Checked_Cholesterol_5years=case_when(\n    Checked_Cholesterol_5years==0 ~ \"no\",\n    Checked_Cholesterol_5years==1 ~ \"yes\")) |&gt;\n  mutate(Checked_Cholesterol_5years=as.factor(Checked_Cholesterol_5years)) |&gt;\n  \n  mutate(Smoker=case_when(\n    Smoker==0 ~ \"no\",\n    Smoker==1 ~ \"yes\")) |&gt;\n  mutate(Smoker=as.factor(Smoker)) |&gt;\n  \n  mutate(Stroke=case_when(\n    Stroke==0 ~ \"no\",\n    Stroke==1 ~ \"yes\")) |&gt;\n  mutate(Stroke=as.factor(Stroke)) |&gt;\n  \n  rename(Heart_Disease_or_Attack=HeartDiseaseorAttack) |&gt;\n  mutate(Heart_Disease_or_Attack=case_when(\n    Heart_Disease_or_Attack==0 ~ \"no\",\n    Heart_Disease_or_Attack==1 ~ \"yes\")) |&gt;\n  mutate(Heart_Disease_or_Attack=as.factor(Heart_Disease_or_Attack)) |&gt;\n  \n  rename(Physical_Activity_30days=PhysActivity) |&gt;\n  mutate(Physical_Activity_30days=case_when(\n    Physical_Activity_30days==0 ~ \"no\",\n    Physical_Activity_30days==1 ~ \"yes\")) |&gt;\n  mutate(Physical_Activity_30days=as.factor(Physical_Activity_30days)) |&gt;\n  \n  rename(Daily_Fruit=Fruits) |&gt;\n  mutate(Daily_Fruit=case_when(\n    Daily_Fruit==0 ~ \"no\",\n    Daily_Fruit==1 ~ \"yes\")) |&gt;\n  mutate(Daily_Fruit=as.factor(Daily_Fruit)) |&gt;\n  \n  rename(Daily_Vegetable=Veggies) |&gt;\n  mutate(Daily_Vegetable=case_when(\n    Daily_Vegetable==0 ~ \"no\",\n    Daily_Vegetable==1 ~ \"yes\")) |&gt;\n  mutate(Daily_Vegetable=as.factor(Daily_Vegetable)) |&gt;\n  \n  rename(Heavy_Alcohol_Consumption=HvyAlcoholConsump) |&gt;\n  mutate(Heavy_Alcohol_Consumption=case_when(\n    Heavy_Alcohol_Consumption==0 ~ \"no\",\n    Heavy_Alcohol_Consumption==1 ~ \"yes\")) |&gt;\n  mutate(Heavy_Alcohol_Consumption=as.factor(Heavy_Alcohol_Consumption)) |&gt;\n  \n  rename(Has_Healthcare=AnyHealthcare) |&gt;\n  mutate(Has_Healthcare=case_when(\n    Has_Healthcare==0 ~ \"no\",\n    Has_Healthcare==1 ~ \"yes\")) |&gt;\n  mutate(Has_Healthcare=as.factor(Has_Healthcare)) |&gt;\n  \n  rename(No_Doctor_bc_Cost=NoDocbcCost) |&gt;\n  mutate(No_Doctor_bc_Cost=case_when(\n    No_Doctor_bc_Cost==0 ~ \"no\",\n    No_Doctor_bc_Cost==1 ~ \"yes\")) |&gt;\n  mutate(No_Doctor_bc_Cost=as.factor(No_Doctor_bc_Cost)) |&gt;\n  \n  rename(General_Health=GenHlth) |&gt;\n  mutate(General_Health=case_when(\n    General_Health==1 ~ \"excellent\",\n    General_Health==2 ~ \"very good\",\n    General_Health==3 ~ \"good\",\n    General_Health==4 ~ \"fair\",\n    General_Health==5 ~ \"poor\")) |&gt;\n  mutate(General_Health=as.factor(General_Health)) |&gt;\n  \n  rename(Bad_Mental_Days_of_Past_30=MentHlth) |&gt;\n  rename(Bad_Physical_Days_of_Past_30=PhysHlth) |&gt;\n    \n  rename(Difficulty_Walking=DiffWalk) |&gt;\n  mutate(Difficulty_Walking=case_when(\n    Difficulty_Walking==0 ~ \"no\",\n    Difficulty_Walking==1 ~ \"yes\")) |&gt;\n  mutate(Difficulty_Walking=as.factor(Difficulty_Walking)) |&gt;\n  \n  mutate(Sex=case_when(\n    Sex==0 ~ \"female\",\n    Sex==1 ~ \"male\")) |&gt;\n  mutate(Sex=as.factor(Sex)) |&gt;\n\n  mutate(Age=case_when(\n    Age==1 ~ \"18-24\",\n    Age==2 ~ \"25-29\",\n    Age==3 ~ \"30-34\",\n    Age==4 ~ \"35-39\",\n    Age==5 ~ \"40-44\",\n    Age==6 ~ \"45-49\",\n    Age==7 ~ \"50-54\",\n    Age==8 ~ \"55-59\",\n    Age==9 ~ \"60-64\",\n    Age==10 ~ \"65-69\",\n    Age==11 ~ \"70-74\",\n    Age==12 ~ \"75-79\",\n    Age==13 ~ \"80 or older\")) |&gt;\n  mutate(Age=as.factor(Age)) |&gt;\n  \n  rename(Highest_Education_Achieved=Education) |&gt;\n  mutate(Highest_Education_Achieved=case_when(\n    Highest_Education_Achieved==1 ~ \"kindergarten\",\n    Highest_Education_Achieved==2 ~ \"1st-8th grade\",\n    Highest_Education_Achieved==3 ~ \"9th-11th grade\",\n    Highest_Education_Achieved==4 ~ \"12th grade or GED\",\n    Highest_Education_Achieved==5 ~ \"1-3 years college\",\n    Highest_Education_Achieved==6 ~ \"4+ years college\")) |&gt;\n  mutate(Highest_Education_Achieved=as.factor(Highest_Education_Achieved)) |&gt;\n\n  mutate(Income=case_when(\n    Income==1 ~ \"less than $10,000\",\n    Income==2 ~ \"less than $15,000\",\n    Income==3 ~ \"less than $20,000\",\n    Income==4 ~ \"less than $25,000\",\n    Income==5 ~ \"less than $35,000\",\n    Income==6 ~ \"less than $50,000\",\n    Income==7 ~ \"less than $75,000\",\n    Income==8 ~ \"more than $75,000\")) |&gt;\n  mutate(Income=as.factor(Income))\n\nhead(df)\n\n# A tibble: 6 × 22\n  Diabetes   High_BP High_Cholesterol Checked_Cholesterol_…¹   BMI Smoker Stroke\n  &lt;fct&gt;      &lt;fct&gt;   &lt;fct&gt;            &lt;fct&gt;                  &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt; \n1 no diabet… yes     yes              yes                       40 yes    no    \n2 no diabet… no      no               no                        25 yes    no    \n3 no diabet… yes     yes              yes                       28 no     no    \n4 no diabet… yes     no               yes                       27 no     no    \n5 no diabet… yes     yes              yes                       24 no     no    \n6 no diabet… yes     yes              yes                       25 yes    no    \n# ℹ abbreviated name: ¹​Checked_Cholesterol_5years\n# ℹ 15 more variables: Heart_Disease_or_Attack &lt;fct&gt;,\n#   Physical_Activity_30days &lt;fct&gt;, Daily_Fruit &lt;fct&gt;, Daily_Vegetable &lt;fct&gt;,\n#   Heavy_Alcohol_Consumption &lt;fct&gt;, Has_Healthcare &lt;fct&gt;,\n#   No_Doctor_bc_Cost &lt;fct&gt;, General_Health &lt;fct&gt;,\n#   Bad_Mental_Days_of_Past_30 &lt;dbl&gt;, Bad_Physical_Days_of_Past_30 &lt;dbl&gt;,\n#   Difficulty_Walking &lt;fct&gt;, Sex &lt;fct&gt;, Age &lt;fct&gt;, …\n\n\nNow our numeric variables consist of:\n\nBMI\nBad_Mental_Days_of_Past_30\nBad_Physical_Days_of_Past_30\n\nand the rest of the columns contain factor/categorical variables, including our response variable, which is Diabetes.\nNow let’s explore what values exist in the data and if any cleaning needs to be done.\n\n# check for missing values\nsum_na &lt;- function(column){\n sum(is.na(column))\n}\n\nna_counts &lt;- df |&gt;\n summarize(across(everything(), sum_na))\n\nna_counts\n\n# A tibble: 1 × 22\n  Diabetes High_BP High_Cholesterol Checked_Cholesterol_5y…¹   BMI Smoker Stroke\n     &lt;int&gt;   &lt;int&gt;            &lt;int&gt;                    &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n1        0       0                0                        0     0      0      0\n# ℹ abbreviated name: ¹​Checked_Cholesterol_5years\n# ℹ 15 more variables: Heart_Disease_or_Attack &lt;int&gt;,\n#   Physical_Activity_30days &lt;int&gt;, Daily_Fruit &lt;int&gt;, Daily_Vegetable &lt;int&gt;,\n#   Heavy_Alcohol_Consumption &lt;int&gt;, Has_Healthcare &lt;int&gt;,\n#   No_Doctor_bc_Cost &lt;int&gt;, General_Health &lt;int&gt;,\n#   Bad_Mental_Days_of_Past_30 &lt;int&gt;, Bad_Physical_Days_of_Past_30 &lt;int&gt;,\n#   Difficulty_Walking &lt;int&gt;, Sex &lt;int&gt;, Age &lt;int&gt;, …\n\n\nThere are no missing values! What values do we see in each categorical column, and how does each value relate to the response variable?"
  },
  {
    "objectID": "EDA.html#data-summaries",
    "href": "EDA.html#data-summaries",
    "title": "EDA",
    "section": "Data Summaries",
    "text": "Data Summaries\n\n# Contingency tables!\ntable(df$Diabetes, High_BP=df$High_BP)\n\n                         High_BP\n                              no    yes\n  no diabetes             136109  82225\n  prediabetes or diabetes   8742  26604\n\ntable(df$Diabetes, High_Cholesterol=df$High_Cholesterol)\n\n                         High_Cholesterol\n                              no    yes\n  no diabetes             134429  83905\n  prediabetes or diabetes  11660  23686\n\ntable(df$Diabetes, Checked_Cholesterol_5years=df$Checked_Cholesterol_5years)\n\n                         Checked_Cholesterol_5years\n                              no    yes\n  no diabetes               9229 209105\n  prediabetes or diabetes    241  35105\n\ntable(df$Diabetes, Smoker=df$Smoker)\n\n                         Smoker\n                              no    yes\n  no diabetes             124228  94106\n  prediabetes or diabetes  17029  18317\n\ntable(df$Diabetes, Stroke=df$Stroke)\n\n                         Stroke\n                              no    yes\n  no diabetes             211310   7024\n  prediabetes or diabetes  32078   3268\n\ntable(df$Diabetes, Heart_Disease_or_Attack=df$Heart_Disease_or_Attack)\n\n                         Heart_Disease_or_Attack\n                              no    yes\n  no diabetes             202319  16015\n  prediabetes or diabetes  27468   7878\n\ntable(df$Diabetes, Physical_Activity_30days=df$Physical_Activity_30days)\n\n                         Physical_Activity_30days\n                              no    yes\n  no diabetes              48701 169633\n  prediabetes or diabetes  13059  22287\n\ntable(df$Diabetes, Daily_Fruit=df$Daily_Fruit)\n\n                         Daily_Fruit\n                              no    yes\n  no diabetes              78129 140205\n  prediabetes or diabetes  14653  20693\n\ntable(df$Diabetes, Daily_Vegetable=df$Daily_Vegetable)\n\n                         Daily_Vegetable\n                              no    yes\n  no diabetes              39229 179105\n  prediabetes or diabetes   8610  26736\n\ntable(df$Diabetes, Heavy_Alcohol_Consumption=df$Heavy_Alcohol_Consumption)\n\n                         Heavy_Alcohol_Consumption\n                              no    yes\n  no diabetes             204910  13424\n  prediabetes or diabetes  34514    832\n\ntable(df$Diabetes, Has_Healthcare=df$Has_Healthcare)\n\n                         Has_Healthcare\n                              no    yes\n  no diabetes              10995 207339\n  prediabetes or diabetes   1422  33924\n\ntable(df$Diabetes, No_Doctor_bc_Cost=df$No_Doctor_bc_Cost)\n\n                         No_Doctor_bc_Cost\n                              no    yes\n  no diabetes             200722  17612\n  prediabetes or diabetes  31604   3742\n\ntable(df$Diabetes, General_Health=df$General_Health)\n\n                         General_Health\n                          excellent  fair  good  poor very good\n  no diabetes                 44159 21780 62189  7503     82703\n  prediabetes or diabetes      1140  9790 13457  4578      6381\n\ntable(df$Diabetes, Difficulty_Walking=df$Difficulty_Walking)\n\n                         Difficulty_Walking\n                              no    yes\n  no diabetes             188780  29554\n  prediabetes or diabetes  22225  13121\n\ntable(df$Diabetes, Sex=df$Sex)\n\n                         Sex\n                          female   male\n  no diabetes             123563  94771\n  prediabetes or diabetes  18411  16935\n\ntable(df$Diabetes, Age=df$Age)\n\n                         Age\n                          18-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64\n  no diabetes              5622  7458 10809 13197 15106 18077 23226 26569 27511\n  prediabetes or diabetes    78   140   314   626  1051  1742  3088  4263  5733\n                         Age\n                          65-69 70-74 75-79 80 or older\n  no diabetes             25636 18392 12577       14154\n  prediabetes or diabetes  6558  5141  3403        3209\n\ntable(df$Diabetes, Highest_Education_Achieved=df$Highest_Education_Achieved)\n\n                         Highest_Education_Achieved\n                          1-3 years college 12th grade or GED 1st-8th grade\n  no diabetes                         59556             51684          2860\n  prediabetes or diabetes             10354             11066          1183\n                         Highest_Education_Achieved\n                          4+ years college 9th-11th grade kindergarten\n  no diabetes                        96925           7182          127\n  prediabetes or diabetes            10400           2296           47\n\ntable(df$Diabetes, Income=df$Income)\n\n                         Income\n                          less than $10,000 less than $15,000 less than $20,000\n  no diabetes                          7428              8697             12426\n  prediabetes or diabetes              2383              3086              3568\n                         Income\n                          less than $25,000 less than $35,000 less than $50,000\n  no diabetes                         16081             21379             31179\n  prediabetes or diabetes              4054              4504              5291\n                         Income\n                          less than $75,000 more than $75,000\n  no diabetes                         37954             83190\n  prediabetes or diabetes              5265              7195\n\n\nLet’s look at each of the categorical variable frequencies again, but this time with plots:\n\n# side-by-side bar plots\nggplot(data = df |&gt;\n  group_by(Diabetes, High_BP) |&gt;\n  summarize(count = n()), aes(x = High_BP, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts with and without High Blood Pressure\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, High_Cholesterol) |&gt;\n  summarize(count = n()), aes(x = High_Cholesterol, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts with and without High Cholesterol\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Checked_Cholesterol_5years) |&gt;\n  summarize(count = n()), aes(x = Checked_Cholesterol_5years, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Checked_Cholesterol_5years\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Smoker) |&gt;\n  summarize(count = n()), aes(x = Smoker, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Smoker\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Stroke) |&gt;\n  summarize(count = n()), aes(x = Stroke, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Stroke\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Heart_Disease_or_Attack) |&gt;\n  summarize(count = n()), aes(x = Heart_Disease_or_Attack, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Heart_Disease_or_Attack\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Physical_Activity_30days) |&gt;\n  summarize(count = n()), aes(x = Physical_Activity_30days, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Physical_Activity_30days\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Daily_Fruit) |&gt;\n  summarize(count = n()), aes(x = Daily_Fruit, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Daily_Fruit\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Daily_Vegetable) |&gt;\n  summarize(count = n()), aes(x = Daily_Vegetable, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Daily_Vegetable\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Heavy_Alcohol_Consumption) |&gt;\n  summarize(count = n()), aes(x = Heavy_Alcohol_Consumption, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Heavy_Alcohol_Consumption\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Has_Healthcare) |&gt;\n  summarize(count = n()), aes(x = Has_Healthcare, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Has_Healthcare\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, No_Doctor_bc_Cost) |&gt;\n  summarize(count = n()), aes(x = No_Doctor_bc_Cost, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. No_Doctor_bc_Cost\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, General_Health) |&gt;\n  summarize(count = n()), aes(x = factor(General_Health, level=c('poor', 'fair', 'good', 'very good', 'excellent')), y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. General_Health\") + \n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  xlab(\"General_Health\") +\n  theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1))\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Difficulty_Walking) |&gt;\n  summarize(count = n()), aes(x = Difficulty_Walking, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Difficulty_Walking\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Sex) |&gt;\n  summarize(count = n()), aes(x = Sex, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Sex\") + \n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Age) |&gt;\n  summarize(count = n()), aes(x = Age, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Age\") + \n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1))\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Highest_Education_Achieved) |&gt;\n  summarize(count = n()), aes(x = factor(Highest_Education_Achieved, level=c(\"kindergarten\", \"1st-8th grade\", \"9th-11th grade\", \"12th grade or GED\", \"1-3 years college\", \"4+ years college\")), y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Highest_Education_Achieved\") + \n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  xlab(\"Highest_Education_Achieved\") +\n  theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1))\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nggplot(data = df |&gt;\n  group_by(Diabetes, Income) |&gt;\n  summarize(count = n()), aes(x = Income, y = count, fill = Diabetes)) +\n  ggtitle(\"Diabetes counts vs. Income\") + \n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1))\n\n`summarise()` has grouped output by 'Diabetes'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nFrom the proportions of observations in each category with and without diabetes, it looks like the variables that are most interesting to use for prediction of Diabetes are:\n\nHigh_BP\nHigh_Cholesterol\nSmoker\nStroke\nHeart_Disease_or_Attack\nPhysical_Activity_30days\nDaily_Fruit\nDaily_Vegetable\nGeneral_Health\nDifficulty_Walking\nSex\nAge\nHighest_Education_Achieved\nIncome\n\nNow let’s look at the distribution of numerical values:\n\n# density plots\nggplot(df, aes(x = BMI)) + geom_density(aes(fill = Diabetes), alpha=0.5, adjust=2) + ggtitle(\"BMI by Diabetes\")\n\n\n\n\n\n\n\nggplot(df |&gt; filter(Bad_Mental_Days_of_Past_30&gt;0), aes(x = Bad_Mental_Days_of_Past_30)) + geom_density(aes(fill = Diabetes), alpha=0.5, adjust=3) + ggtitle(\"Bad_Mental_Days_of_Past_30 by Diabetes\")\n\n\n\n\n\n\n\nggplot(df |&gt; filter(Bad_Physical_Days_of_Past_30&gt;0), aes(x = Bad_Physical_Days_of_Past_30)) + geom_density(aes(fill = Diabetes), alpha=0.5, adjust=3) + ggtitle(\"Bad_Physical_Days_of_Past_30 by Diabetes\")\n\n\n\n\n\n\n\n# box and whisker plots\nggplot(df) + geom_boxplot(aes(x = Diabetes, y = BMI, fill = Diabetes)) + ggtitle(\"BMI vs. Diabetes\")\n\n\n\n\n\n\n\nggplot(df) + geom_boxplot(aes(x = Diabetes, y = Bad_Mental_Days_of_Past_30, fill = Diabetes)) + ggtitle(\"Bad_Mental_Days_of_Past_30 vs. Diabetes\")\n\n\n\n\n\n\n\nggplot(df) + geom_boxplot(aes(x = Diabetes, y = Bad_Physical_Days_of_Past_30, fill = Diabetes)) + ggtitle(\"Bad_Physical_Days_of_Past_30 vs. Diabetes\")\n\n\n\n\n\n\n\n\nFrom these plots, it appears that all 3 numerical variables are correlated with Diabetes and would be useful in prediction.\nClick here for the Modeling Page"
  },
  {
    "objectID": "Modeling.html#introduction",
    "href": "Modeling.html#introduction",
    "title": "Modeling",
    "section": "",
    "text": "In this Modeling page, we will build predictive classification models for the Diabetes Health Indicators Dataset from kaggle. Our goal is predict the Diabetes_binary variable, and for this task, we will use the following variables as determined by our Exploratory Data Analysis:\nCategorical Variables\n\nHighBP (whether the subject has high blood pressure)\nHighChol (whether the subject has high cholesterol)\nSmoker\nStroke\nHeartDiseaseorAttack\nPhysActivity (physical activity in the past 30 days, not including job)\nFruits (subject consumes fruit at least once a day)\nVeggies (subject consumes veggies at least once a day)\nGenHlth (subject’s rating of their health from 1=excellent to 5=poor)\nDiffWalk (serious difficulty walking or climbing stairs)\nSex (male or female)\nAge (age categories from “18-24” to “80 or older”)\nEducation (highest education achieved, from 1=“kindergarten” to 6=“4+ years of college”)\nIncome (income categories from “less than $10,000” to “more than $75,000”)\n\nNumerical Variables\n\nBMI\nMentHlth (how many of the last 30 days were poor mental health days)\nPhysHlth (how many of the last 30 days were poor physical health days)"
  },
  {
    "objectID": "Modeling.html#preprocess-split-data",
    "href": "Modeling.html#preprocess-split-data",
    "title": "Modeling",
    "section": "Preprocess + Split Data",
    "text": "Preprocess + Split Data\nThen, split the data into a training (70% of the data) and test set (30% of the data). Set a seed to make things reproducible. The goal is to create models for predicting the Diabetes_binary variable (using tidymodels). We’ll use log-loss as our metric to evaluate the models. For both model types, use log-loss with 5 fold cross-validation to select the best model from that family of models. You should set up your own grid of tuning parameters for each model (even if it is just the number of levels to look at)."
  },
  {
    "objectID": "Modeling.html#model-creation",
    "href": "Modeling.html#model-creation",
    "title": "Modeling",
    "section": "Model Creation",
    "text": "Model Creation\n\nClassification Tree\nA classification tree model is a decision tree model whose output is one of the categorical values of the response variable. The model is used to predict the value of the response variable for a new datapoint that contains the necessary input variables. For each node in the tree, the branches from that node decide the flow of the datapoint to the next node based on the value of one of the variables. For example, one branch is taken if the datapoint’s BMI value is less than 27, otherwise the other branch is taken. The datapoint flows through the tree until a leaf node is reached, and the leaf node indicates the response variable for the point to be either 0 (no diabetes) or 1 (prediabetes or diabetes).\nLet’s train a classification tree on our data:\n\n# create the recipe for our classification tree\n# convert the categorical variables to factors and then dummy variables\ntree_recipe &lt;- recipe(Diabetes_binary ~ HighChol + Smoker + Sex + Income + BMI, data=df_train) |&gt;\n  step_mutate(Diabetes_binary=as.factor(Diabetes_binary)) |&gt;\n  step_mutate(HighChol=as.factor(HighChol)) |&gt;\n  step_mutate(Smoker=as.factor(Smoker)) |&gt;\n  step_mutate(Sex=as.factor(Sex)) |&gt;\n  step_mutate(Income=as.factor(Income)) |&gt;\n  step_dummy(HighChol, Smoker, Sex, Income)\n\n# define model architecture\ntree_model &lt;- decision_tree(cost_complexity = tune()) |&gt;  \n  set_engine(\"rpart\") |&gt;\n  set_mode(\"classification\")\n\n# create tree workflow\ntree_wfl &lt;- workflow() |&gt;\n  add_recipe(tree_recipe) |&gt;\n  add_model(tree_model)\n\n# use a grid search for tuning parameter\ntree_grid &lt;- tree_wfl |&gt; \n  tune_grid(resamples = df_folds, metrics=metric_set(mn_log_loss))\n\nWarning: package 'rpart' was built under R version 4.4.2\n\n\nNow that we have multiple classification trees trained with varying values of the cost_complexity parameter, let’s determine which one has the best performance with the log loss metric and finalize the model’s workflow:\n\n# see how the log loss metric looks for each model in the grid\ntree_grid |&gt; collect_metrics()\n\n# A tibble: 10 × 7\n   cost_complexity .metric     .estimator  mean     n std_err .config           \n             &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;             \n 1        1.51e- 5 mn_log_loss binary     0.378     5 0.00125 Preprocessor1_Mod…\n 2        6.27e- 5 mn_log_loss binary     0.378     5 0.00126 Preprocessor1_Mod…\n 3        1.95e- 9 mn_log_loss binary     0.369     5 0.00358 Preprocessor1_Mod…\n 4        7.54e- 9 mn_log_loss binary     0.369     5 0.00358 Preprocessor1_Mod…\n 5        5.15e- 2 mn_log_loss binary     0.404     5 0.00175 Preprocessor1_Mod…\n 6        3.21e-10 mn_log_loss binary     0.369     5 0.00358 Preprocessor1_Mod…\n 7        7.16e- 3 mn_log_loss binary     0.404     5 0.00175 Preprocessor1_Mod…\n 8        4.59e- 4 mn_log_loss binary     0.378     5 0.00166 Preprocessor1_Mod…\n 9        2.14e- 7 mn_log_loss binary     0.369     5 0.00358 Preprocessor1_Mod…\n10        2.44e- 6 mn_log_loss binary     0.369     5 0.00358 Preprocessor1_Mod…\n\n# use log loss to determine the best model (i.e. that with the best tuning parameter value) and finalize its workflow\ntree_best &lt;- select_best(tree_grid, metric=\"mn_log_loss\")\n\ntree_final_wfl &lt;- tree_wfl |&gt;\n  finalize_workflow(tree_best)\n\nNow we can use our finalized workflow to train a final classification tree model on all of the training data:\n\n# train the final tree model to be compared to the random forest model\ntree_final &lt;- tree_final_wfl |&gt;\n  last_fit(df_split, metrics=metric_set(mn_log_loss))\n\n\n\nRandom Forest\nA random forest model combines many decision trees into one model. In our case, since we are doing classification, the output of all of the individual decision trees is aggregated and a majority vote determines which classification value is output. The trees in the random forest are trained with random samples from the training dataset, and only with some subset of the variables in the training dataset. For example, rather than using all 5 of our predictor variables for training, each tree in our random forest might only be trained with 3 of the predictor variables. This produces a greater variety of tree structure within the forest, causing our overall model to be more consistent in structure and less sensitive to the training dataset used.\nLet’s train a random forest on our data! We’ll tune our mtry parameter, which controls how many variables are used in the trees within the random forest:\n\n# same recipe works for random forest\nrf_recipe &lt;- tree_recipe\n\n# use random forest model from parsnip\nrf_model &lt;- rand_forest(mtry = tune()) |&gt;\n set_engine(\"ranger\") |&gt;\n set_mode(\"classification\")\n\n# create random forest workflow\nrf_wfl &lt;- workflow() |&gt;\n add_recipe(rf_recipe) |&gt;\n add_model(rf_model)\n\n# use a grid search for tuning parameter\nrf_grid &lt;- rf_wfl |&gt;\n tune_grid(resamples = df_folds, metrics=metric_set(mn_log_loss))\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\nWarning: package 'ranger' was built under R version 4.4.2\n\n\nNow that we have multiple random forests trained with varying values of the mtry parameter, let’s determine which one has the best performance with the log loss metric and finalize the model’s workflow:\n\n# see how the log loss metric looks for each model in the grid\nrf_grid |&gt; collect_metrics()\n\n# A tibble: 8 × 7\n   mtry .metric     .estimator  mean     n std_err .config             \n  &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1     2 mn_log_loss binary     0.359     5 0.00182 Preprocessor1_Model1\n2     3 mn_log_loss binary     0.354     5 0.00194 Preprocessor1_Model2\n3     6 mn_log_loss binary     0.353     5 0.00207 Preprocessor1_Model3\n4    10 mn_log_loss binary     0.360     5 0.00213 Preprocessor1_Model4\n5     9 mn_log_loss binary     0.358     5 0.00212 Preprocessor1_Model5\n6     4 mn_log_loss binary     0.352     5 0.00202 Preprocessor1_Model6\n7     1 mn_log_loss binary     0.374     5 0.00159 Preprocessor1_Model7\n8     7 mn_log_loss binary     0.354     5 0.00208 Preprocessor1_Model8\n\n# use log loss to determine the best model (i.e. that with the best tuning parameter value) and finalize its workflow\nrf_best &lt;- select_best(rf_grid, metric=\"mn_log_loss\")\n\nrf_final_wfl &lt;- rf_wfl |&gt;\n  finalize_workflow(rf_best)\n\nNow we can use our finalized workflow to train a final random forest model on all of the training data:\n\n# train the final random forest model to be compared to the tree model\nrf_final &lt;- rf_final_wfl |&gt;\n  last_fit(df_split, metrics=metric_set(mn_log_loss))\n\n\n\nFinal Model Selection\nLet’s compare our final tree model and our final random forest model and see which has better performance on the test set:\n\nrbind(collect_metrics(tree_final), collect_metrics(rf_final))\n\n# A tibble: 2 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 mn_log_loss binary         0.361 Preprocessor1_Model1\n2 mn_log_loss binary         0.351 Preprocessor1_Model1\n\n\nThe winner is…..the random forest model! 🏆\nClick here for the EDA Page"
  },
  {
    "objectID": "Modeling.html#load-split-data",
    "href": "Modeling.html#load-split-data",
    "title": "Modeling",
    "section": "Load + Split Data",
    "text": "Load + Split Data\nThen, split the data into a training (70% of the data) and test set (30% of the data). Set a seed to make things reproducible. The goal is to create models for predicting the Diabetes_binary variable (using tidymodels). We’ll use log-loss as our metric to evaluate the models. For both model types, use log-loss with 5 fold cross-validation to select the best model from that family of models. You should set up your own grid of tuning parameters for each model (even if it is just the number of levels to look at).\n\n# import libraries\nlibrary(readr)\nlibrary(tidymodels)\n\n\n# read in the data\ndf &lt;- readr::read_csv(\"diabetes_binary_health_indicators_BRFSS2015.csv\")\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(df)\n\n# A tibble: 6 × 22\n  Diabetes_binary HighBP HighChol CholCheck   BMI Smoker Stroke\n            &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1               0      1        1         1    40      1      0\n2               0      0        0         0    25      1      0\n3               0      1        1         1    28      0      0\n4               0      1        0         1    27      0      0\n5               0      1        1         1    24      0      0\n6               0      1        1         1    25      1      0\n# ℹ 15 more variables: HeartDiseaseorAttack &lt;dbl&gt;, PhysActivity &lt;dbl&gt;,\n#   Fruits &lt;dbl&gt;, Veggies &lt;dbl&gt;, HvyAlcoholConsump &lt;dbl&gt;, AnyHealthcare &lt;dbl&gt;,\n#   NoDocbcCost &lt;dbl&gt;, GenHlth &lt;dbl&gt;, MentHlth &lt;dbl&gt;, PhysHlth &lt;dbl&gt;,\n#   DiffWalk &lt;dbl&gt;, Sex &lt;dbl&gt;, Age &lt;dbl&gt;, Education &lt;dbl&gt;, Income &lt;dbl&gt;\n\nset.seed(29)\n\n# stratifying to make sure each model gets trained with examples with Diabetes=1\ndf_split &lt;- initial_split(df, prop=0.7, strata=Diabetes_binary)\ndf_train &lt;- training(df_split)\ndf_test &lt;- testing(df_split)\n\n# creating folds for cross validation\ndf_folds &lt;- vfold_cv(df_train, 5)"
  }
]